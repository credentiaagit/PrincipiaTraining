#!/bin/bash
#
# Trading File Processor
# Comprehensive example combining all shell scripting concepts
#

set -euo pipefail

# Constants
readonly SCRIPT_NAME=$(basename "$0")
readonly LOG_DIR="/tmp/trading_logs"
readonly LOG_FILE="$LOG_DIR/processor_$(date +%Y%m%d).log"

# Global variables
VERBOSE=false
DRY_RUN=false
declare -A STATS

# Create log directory
mkdir -p "$LOG_DIR"

# Logging functions
log_info() {
    local msg="[INFO] $(date '+%Y-%m-%d %H:%M:%S'): $1"
    echo "$msg" | tee -a "$LOG_FILE"
}

log_error() {
    local msg="[ERROR] $(date '+%Y-%m-%d %H:%M:%S'): $1"
    echo "$msg" | tee -a "$LOG_FILE" >&2
}

log_debug() {
    if [ "$VERBOSE" = true ]; then
        echo "[DEBUG] $1" | tee -a "$LOG_FILE"
    fi
}

# Cleanup function
cleanup() {
    log_info "Cleanup completed"
}

trap cleanup EXIT

# Validation function
validate_file() {
    local file=$1
    local errors=0
    
    log_debug "Validating: $file"
    
    # Check existence
    if [ ! -f "$file" ]; then
        log_error "File not found: $file"
        return 1
    fi
    
    # Check not empty
    if [ ! -s "$file" ]; then
        log_error "File is empty: $file"
        return 1
    fi
    
    # Check header
    local expected_header="TradeID,Symbol,Quantity,Price"
    local actual_header=$(head -1 "$file")
    
    if [ "$actual_header" != "$expected_header" ]; then
        log_error "Invalid header format"
        log_error "Expected: $expected_header"
        log_error "Got: $actual_header"
        return 1
    fi
    
    log_info "Validation passed: $file"
    return 0
}

# Process trades
process_trades() {
    local input_file=$1
    local output_file=$2
    
    log_info "Processing trades from: $input_file"
    
    if [ "$DRY_RUN" = true ]; then
        log_info "DRY RUN: Would process $input_file"
        return 0
    fi
    
    # Process with awk
    awk -F',' '
    NR==1 {
        print $0",Value,Status"
        next
    }
    {
        trade_id = $1
        symbol = $2
        qty = $3
        price = $4
        value = qty * price
        
        # Determine status based on value
        if (value > 100000)
            status = "LARGE"
        else if (value > 50000)
            status = "MEDIUM"
        else
            status = "SMALL"
            
        printf "%s,%s,%d,%.2f,%.2f,%s\n", trade_id, symbol, qty, price, value, status
        
        # Collect statistics
        total_value += value
        count++
        symbol_count[symbol]++
    }
    END {
        # Print to stderr for statistics
        print "STATS:TOTAL_VALUE=" total_value > "/dev/stderr"
        print "STATS:TRADE_COUNT=" count > "/dev/stderr"
        for (sym in symbol_count) {
            print "STATS:SYMBOL:" sym ":" symbol_count[sym] > "/dev/stderr"
        }
    }
    ' "$input_file" > "$output_file" 2>&1 | while IFS= read -r line; do
        if [[ $line == STATS:* ]]; then
            # Parse statistics
            stat_line=${line#STATS:}
            key=$(echo "$stat_line" | cut -d'=' -f1)
            value=$(echo "$stat_line" | cut -d'=' -f2)
            STATS[$key]=$value
            log_debug "Stat: $key = $value"
        fi
    done
    
    log_info "Processing complete: $output_file"
    return 0
}

# Generate report
generate_report() {
    local processed_file=$1
    local report_file=$2
    
    log_info "Generating report: $report_file"
    
    cat > "$report_file" << EOF
================================================================================
                          TRADE PROCESSING REPORT
================================================================================
Date: $(date '+%Y-%m-%d %H:%M:%S')
Input File: $processed_file

SUMMARY:
--------
Total Trades: $(tail -n +2 "$processed_file" | wc -l)
Total Value: \$$(awk -F',' 'NR>1 {sum+=$5} END {printf "%.2f", sum}' "$processed_file")

BREAKDOWN BY STATUS:
-------------------
$(awk -F',' 'NR>1 {count[$6]++} END {for(s in count) printf "%-10s: %d trades\n", s, count[s]}' "$processed_file" | sort)

TOP 5 SYMBOLS BY TRADE COUNT:
-----------------------------
$(awk -F',' 'NR>1 {count[$2]++} END {for(s in count) print count[s], s}' "$processed_file" | sort -rn | head -5 | awk '{printf "%-10s: %d trades\n", $2, $1}')

TOP 5 SYMBOLS BY VALUE:
-----------------------
$(awk -F',' 'NR>1 {value[$2]+=$5} END {for(s in value) printf "%s %.2f\n", s, value[s]}' "$processed_file" | sort -k2 -rn | head -5 | awk '{printf "%-10s: $%.2f\n", $1, $2}')

LARGE TRADES (>$100K):
---------------------
$(awk -F',' 'NR>1 && $6=="LARGE" {printf "%-10s %-8s %8d @ $%8.2f = $%10.2f\n", $1, $2, $3, $4, $5}' "$processed_file")

================================================================================
Report generated by: $SCRIPT_NAME
================================================================================
EOF
    
    log_info "Report generated: $report_file"
    cat "$report_file"
}

# Usage function
usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] <input_file>

Process trade files and generate reports for capital markets operations.

Options:
    -h, --help          Show this help message
    -v, --verbose       Enable verbose/debug output
    -n, --dry-run       Perform dry run (no actual processing)
    -o, --output DIR    Output directory (default: current directory)

Examples:
    $SCRIPT_NAME trades_20241028.csv
    $SCRIPT_NAME -v -o /tmp/output trades.csv
    $SCRIPT_NAME --dry-run trades.csv

Input file format:
    TradeID,Symbol,Quantity,Price
    T001,AAPL,100,175.50
    ...

Output:
    - processed_<input>.csv : Processed trades with calculated values
    - report_<input>.txt    : Summary report

EOF
}

# Parse command-line arguments
OUTPUT_DIR="."

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -n|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        *)
            INPUT_FILE="$1"
            shift
            ;;
    esac
done

# Main function
main() {
    log_info "=========================================="
    log_info "Starting Trade File Processor"
    log_info "=========================================="
    
    # Check input file
    if [ -z "${INPUT_FILE:-}" ]; then
        log_error "Missing input file"
        usage
        exit 1
    fi
    
    # Validate input
    if ! validate_file "$INPUT_FILE"; then
        log_error "Validation failed"
        exit 1
    fi
    
    # Prepare output files
    local basename=$(basename "$INPUT_FILE" .csv)
    local output_file="${OUTPUT_DIR}/processed_${basename}.csv"
    local report_file="${OUTPUT_DIR}/report_${basename}.txt"
    
    # Create output directory
    mkdir -p "$OUTPUT_DIR"
    
    # Process trades
    if ! process_trades "$INPUT_FILE" "$output_file"; then
        log_error "Processing failed"
        exit 1
    fi
    
    # Generate report
    if ! generate_report "$output_file" "$report_file"; then
        log_error "Report generation failed"
        exit 1
    fi
    
    log_info "=========================================="
    log_info "Processing Complete!"
    log_info "Output: $output_file"
    log_info "Report: $report_file"
    log_info "Log: $LOG_FILE"
    log_info "=========================================="
}

# Run main
main "$@"

